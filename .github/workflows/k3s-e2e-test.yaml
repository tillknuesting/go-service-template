name: K3s and Nginx

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install k3s
        run: |
          echo "Starting K3s cluster"
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="v1.25.11+k3s1" K3S_KUBECONFIG_MODE=777 INSTALL_K3S_EXEC="server --disable traefik" sh -
          mkdir -p ~/.kube
          cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Wait for k3s service to be running
        run: |
          retries=0
          until sudo systemctl is-active --quiet k3s; do
            if [ $retries -eq 30 ]; then
              echo "k3s service is not running after multiple retries."
              exit 1
            fi
            retries=$((retries+1))
            sleep 5
          done
          echo "k3s service is running."

      - name: Wait for k3s node to be ready
        run: |
          sleep 10
          retries=0
          until kubectl get nodes -o jsonpath='{.items[0].status.conditions[?(@.type=="Ready")].status}' | grep True; do
            if [ $retries -eq 30 ]; then
              echo "k3s node is not ready after multiple retries."
              exit 1
            fi
            retries=$((retries+10))
            sleep 10
          done
          echo "k3s node is ready."

      - name: Deploy Microservice
        run: |
          kubectl apply -f deployment/deployment.yaml -n default

          elapsed=0
          while [[ $elapsed -lt 60 ]]; do
            deployment_status=$(kubectl get deployment key-value-service -n default -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')
            replicas_ready=$(kubectl get deployment key-value-service -n default -o jsonpath='{.status.readyReplicas}')
            replicas_desired=$(kubectl get deployment key-value-service -n default -o jsonpath='{.spec.replicas}')

            if [[ $deployment_status == "True" ]] && [[ $replicas_ready -eq $replicas_desired ]]; then
              echo "Microservice deployment is ready."
              break
            elif [[ $deployment_status == "Error" ]]; then
              echo "Microservice deployment encountered an error. Printing debug information..."
              kubectl describe deployment key-value-service -n default
              kubectl logs --tail=50 deployment/key-value-service -n default
              kubectl get events --field-selector involvedObject.name=key-value-service -n default
              exit 1
            fi

            echo "Microservice deployment is not ready yet. Waiting..."
            sleep 10
            elapsed=$((elapsed+10))
          done

          if [[ $elapsed -ge 60 ]]; then
            echo "Timeout exceeded. Microservice deployment is not ready within the specified time."
            echo "Printing debug information..."
            kubectl describe deployment key-value-service -n default
            kubectl logs --tail=50 deployment/key-value-service -n default
            kubectl get events --field-selector involvedObject.name=key-value-service -n default
            exit 1
          fi

      - name: Expose Microservice service
        run: |
          kubectl expose deployment key-value-service --port=8080 --target-port=8080 --type=NodePort -n default

      - name: Wait for Microservice service to be ready
        run: |
          retries=0
          until kubectl get service key-value-service -n default -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' | grep True; do
            if [ $retries -eq 30 ]; then
              echo "Microservice service is not ready after multiple retries."
              exit 1
            fi
            retries=$((retries+1))
            sleep 5
          done
          echo "Microservice service is ready."

      - name: Send POST request to the service
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"key": "key1", "value": "value1"}' http://localhost:8080/set
